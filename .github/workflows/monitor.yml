name: DeepSeek Monitor

on:
  schedule:
    - cron: '30 */1 * * *'  # 每小时的30分运行（北京时间）
  workflow_dispatch:  # 支持手动触发

jobs:
  monitor:
    runs-on: ubuntu-22.04
    timeout-minutes: 10  # 增加超时时间到10分钟
    env:
      TZ: Asia/Shanghai  # 设置时区为北京时间
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2 \
          libatk1.0-0 \
          libatk-bridge2.0-0 \
          libatspi2.0-0 \
          libcups2 \
          libdbus-1-3 \
          libdrm2 \
          libgbm1 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libwayland-client0 \
          libxcomposite1 \
          libxdamage1 \
          libxfixes3 \
          libxrandr2 \
          libxkbcommon0 \
          xvfb \
          fonts-noto-color-emoji \
          fonts-unifont
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Playwright browsers
      run: |
        python -m playwright install chromium --with-deps
        
    - name: Create env file
      run: |
        mkdir -p config
        echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}" >> config/.env
        echo "ENABLE_SERVERCHAN=${{ secrets.ENABLE_SERVERCHAN }}" >> config/.env
        echo "SERVERCHAN_KEY=${{ secrets.SERVERCHAN_KEY }}" >> config/.env
        echo "ENABLE_TELEGRAM=${{ secrets.ENABLE_TELEGRAM }}" >> config/.env
        echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> config/.env
        echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> config/.env
        
    - name: Create log directory
      run: |
        mkdir -p logs
        touch logs/monitor.log
        
    - name: Run monitor
      id: monitor
      continue-on-error: true  # 允许监控脚本失败但继续执行后续步骤
      run: |
        # 运行一次监控检查后退出
        timeout 300 xvfb-run --auto-servernum python src/main.py || true
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Send status notification
      if: always()  # 无论成功失败都发送状态通知
      run: |
        # 获取最新的监控结果
        MONITOR_RESULT=$(tail -n 50 logs/monitor.log | grep -A 10 "DeepSeek 服务状态报告" | tail -n 11)
        STATUS="${{ steps.monitor.outcome }}"
        
        if [ "$STATUS" = "success" ]; then
          TITLE="DeepSeek服务状态"
          ICON="✅"
        else
          TITLE="DeepSeek服务异常"
          ICON="🚨"
        fi
        
        # 格式化监控结果，去除ANSI颜色代码
        CLEAN_RESULT=$(echo "$MONITOR_RESULT" | sed 's/\x1b\[[0-9;]*m//g')
        
        # 构建通知内容
        MESSAGE="${CLEAN_RESULT}"
        
        # 发送通知
        echo "发送通知..."
        echo "标题: ${TITLE}"
        echo "内容: ${MESSAGE}"
        
        curl -X POST \
          "https://sctapi.ftqq.com/${{ secrets.SERVERCHAN_KEY }}.send" \
          -d "title=${TITLE}" \
          -d "desp=${MESSAGE}" \
          -H "Content-Type: application/x-www-form-urlencoded"
      continue-on-error: true
      
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: monitor-logs
        path: logs/monitor.log
        
    - name: Clean up
      if: always()  # 无论成功失败都执行清理
      run: |
        rm -rf /tmp/.X*-lock || true  # 清理可能的X server锁文件 